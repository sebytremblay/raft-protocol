#!/usr/bin/python3 -u

import argparse
import socket
import time
import json
import select
import enum
import random

# Global constants
BROADCAST = "FFFF"
TIMEOUT = (500, 800)
HEARTBEAT = 0.150
APPENDFREQUENCY = 0.300

# The possible states for a replica
class ReplicaState(enum.Enum):
    FOLLOWER = 1
    CANDIDATE = 2
    LEADER = 3
    
class Replica:
    """
    This class represents a replica in the key-value store. It is responsible 
    for handling  all communication between replicas and clients.
    """
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others

        # Track active replicas
        self.replicas = {value: {"status": 0, "log_index": 0, "match_ind": 0} for index, value in enumerate(self.others)}
        self.state = ReplicaState.FOLLOWER
        self.db = {}
        self.current_leader = BROADCAST
        self.election_timeout = None
        self.generate_timeout()
        self.queue = []
        self.votes = []
        self.append_time = {replica: 0 for replica in self.others}

        # state variables
        self.term = 0
        self.voted_for = None
        self.log = [{"command": None, "term": 0}] 
        self.log_file = open(f"{self.id}.log", "w")
        self.comm_ind = 0 
        self.last_applied = 0
        self.next_ind = {}
        self.match_ind = {}
        self.last_hearbeat = time.time()

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))  
        self.send_initial_hello()

    def send_initial_hello(self):
        hello = {"src": self.id, 
                 "dst": BROADCAST, 
                 "leader": BROADCAST, 
                 "type": "hello"}
        self.send(hello)

    def log_message(self, message) -> None:
        """Logs a message.

        Args:
            message: The message to log.
        """
        self.log_file.write(f"{message}\n")

    def generate_timeout(self) -> None:
        """Generates a random timeout for the replica."""
        self.election_timeout = time.time() + float(random.uniform(*TIMEOUT) / 1000)

    def send(self, message) -> None:
        """Sends a message to a replica.

        Args:
            message: The message to send.
        """
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    def transition_state(self, state, message=None) -> None:
        """Transitions the replica to a new state.

        Args:
            state: The new state to transition to.
            message: The message to update leader/term after successful election.
        """
        # Transition to new state
        if state == ReplicaState.FOLLOWER:
            self.make_follower(message)
        elif state == ReplicaState.CANDIDATE:
            self.make_candidate()
        elif state == ReplicaState.LEADER:
           self.make_leader()
            
    def make_follower(self, message) -> None:
        """Transitions the replica to a follower state.

        Args:
            message: The message to update leader/term after successful election.
        """
        # Update state and restart election timeout
        self.state = ReplicaState.FOLLOWER
        self.generate_timeout()
        
        # Update leader and term
        if message:
            self.current_leader = message["leader"]
            self.term = message["term"]
        else:
            self.current_leader = BROADCAST
            
        # Reset votes
        self.voted_for = None
        self.votes.clear()
    
    def make_candidate(self) -> None:
        """Transitions the replica to a candidate state."""
        # Update state and restart election timeout
        self.state = ReplicaState.CANDIDATE
        self.generate_timeout()
        
        # Begin election
        self.current_leader = BROADCAST
        self.term += 1
        
        # Vote for self
        self.voted_for = self.id
        self.votes = [self.id]
    
    def make_leader(self) -> None:
        """Transitions the replica to a leader state."""
        # Elect self as leader
        self.state = ReplicaState.LEADER
        self.current_leader = self.id
        
        # Inform other replicas of leadership
        for replica in self.others:
            self.next_ind[replica] = self.comm_ind + 1
            self.match_ind[replica] = 0
        self.perform_heartbeat(0)

    def start_election(self) -> None:
        """Starts an election for the replica."""
        self.transition_state(ReplicaState.CANDIDATE)
        self.request_vote()

    def request_vote(self) -> None:
        """Broadcasts a RequestVote RPC message to other replicas."""
        vote_message = {"src": self.id, 
                    "dst": BROADCAST, 
                    "leader": BROADCAST, 
                    "type": "requestvote", 
                    "term": self.term,
                    "last_log_index": len(self.log) - 1,
                    "last_log_term": self.log[-1]["term"]}
        self.send(vote_message)    

    def has_updated_logs(self, message) -> bool:
        """Checks if the sender's log is up to date with the replica's.

        Args:
            message: The sender's message containing term/log information.

        Returns:
            bool: True if the sender's log is up to date with the replica's, False otherwise.
        """
        if self.log[-1]["term"] != message["last_log_term"]:
            return self.log[-1]["term"] <= message["last_log_term"]
        else:
            return len(self.log) - 1 <= message["last_log_index"]
        
    def is_vote_valid(self, vote_request):
        """Evaluates whether a received vote request is valid based on current state."""
        if (vote_request["term"] < self.term or
            self.state != ReplicaState.FOLLOWER or
            not self.has_updated_logs(vote_request)):
            return False
        
        return self.voted_for is None or self.voted_for == vote_request["src"]

    def handle_vote_request(self, vote_request):
        """Processes a vote request."""
        self.generate_timeout()
        
        if not self.is_vote_valid(vote_request):
            self.send_vote_response(vote_request["src"], False)
        else:
            self.voted_for = vote_request["src"]
            self.send_vote_response(vote_request["src"], True)
            self.generate_timeout()

    def send_vote_response(self, src, vote):
        """Sends a vote response to a candidate."""
        vote_response = {
            "src": self.id,
            "dst": src,
            "type": "vote",
            "leader": self.current_leader,
            "term": self.term,
            "vote": vote
        }
        self.send(vote_response)

    def parse_vote(self, message) -> None:
        """Handles incoming vote messages.

        Args:
            message: The vote message being read.
        """
        if message["vote"]:
            self.votes.append(message["src"])
            if len(self.votes) >= ((len(self.others) / 2) + 1):
                self.transition_state(ReplicaState.LEADER)

    def send_append_replica(self, replica, heartbeat=False) -> None:
        """Sends AppendEntries RPCs to other replicas as the leader.

        Args:
            replica: The replica to send the AppendEntries RPC to.
            heartbeat: Indicates whether the AppendEntries RPC is a heartbeat.
        """
        # Only leader can send AppendEntries 
        previous_ind = self.next_ind[replica] - 1
        previous_term = self.log[previous_ind]["term"]
        entries = self.log[previous_ind + 1:]
        
        # Split entries into chunks to prevent size limit
        entry_chunks = [entries[x:x + 30] for x in range(0, len(entries), 30)]
        
        # Base message for AppendEntries
        base_message = {"src": self.id, 
                    "dst": replica, 
                    "leader": self.id, 
                    "type": "append", 
                    "term": self.term,
                    "prev_log_index": previous_ind, 
                    "prev_log_term": previous_term, 
                    "entries": [], 
                    "leader_commit": self.comm_ind}
        
        # Send heartbeat
        if heartbeat:
            append_message = base_message.copy()
            append_message["entries"] = []
            self.send(append_message)
            return
        
        # Send entries in chunks
        for chunk in entry_chunks:
            append_message = base_message.copy()
            append_message["entries"] = chunk
            self.send(append_message)

    def perform_heartbeat(self, current_time) -> None:
        """Sends heartbeat to all other replicas when timeout runs out.

        Args:
            current_time: The current time.
        """
        diff = float(current_time - self.last_hearbeat)
        if self.state == ReplicaState.LEADER and diff >= HEARTBEAT:
            for replica in self.others:
                self.send_append_replica(replica, True)
            self.last_hearbeat = current_time

    def append_entries(self, current_time) -> None:
        """Sends heartbeat to all other replicas when timeout runs out.

        Args:
            current_time: The current time.
        """
        if self.state == ReplicaState.LEADER:
            for replica in self.others:
                diff = float(current_time - self.append_time[replica])
                if diff >= APPENDFREQUENCY and self.match_ind[replica] < len(self.log) - 1:
                    self.append_time[replica] = current_time
                    self.send_append_replica(replica)

    def is_conflicting_log_index(self, index) -> int:
        """Finds the first index of a conflicting term in the log.

        Args:
            index: The index to start searching from.

        Returns:
            int: The first index of a conflicting term in the log.
        """
        if len(self.log) - 1 < index: 
            return len(self.log) - 1
        else:
            term = self.log[index]["term"]
            for index, entry in enumerate(self.log):
                if term == entry["term"]:
                    return index
        return 0

    def handle_append(self, message) -> None:
        """Handles incoming AppendEntries RPCs as a follower."""
        self.transition_state(ReplicaState.FOLLOWER, message)
        self.generate_timeout()

        # Do nothing if the term is outdated
        if not self.validate_append_request(message):
            return

        # Process and append new log entries
        self.process_queued_messages()
        self.process_log_entries(message)

    def validate_append_request(self, message) -> bool:
        """Validate append request and reply with failure if necessary.
        
        Args:
            message: The append message to validate."""
        fail = {
            "src": self.id, 
            "dst": message["src"], 
            "leader": self.current_leader,
            "type": "fail", 
            "term": self.term, 
            "first_index": self.is_conflicting_log_index(message["prev_log_index"])
        }
        
        # Check term and log entry conditions
        if message["term"] < self.term or \
        message["prev_log_index"] > len(self.log) - 1 or \
        self.log[message["prev_log_index"]]["term"] != message["prev_log_term"]:
            self.send(fail)
            return False
        return True

    def process_queued_messages(self):
        """Process and redirect any queued messages."""
        for queued_message in self.queue:
            self.send_redirect(queued_message)
        self.queue.clear()

    def process_log_entries(self, message):
        """Process and append new log entries from the append message.
        
        Args:
            message: The append message to process."""
        # Handle conflicting entries
        next_ind = message["prev_log_index"] + 1
        if next_ind <= len(self.log) - 1:
            del self.log[next_ind:]
            
        # Append new entries
        for entry in message["entries"]:
            self.log.append(entry)

        # Update commit index and send acknowledgment
        self.comm_ind = min(message["leader_commit"], len(self.log) - 1)
        ack_append = {
            "src": self.id, 
            "dst": message["src"], 
            "leader": self.current_leader, 
            "type": "ok", 
            "term": self.term,
            "prev_log_index": message["prev_log_index"], 
            "prev_log_term": message["prev_log_term"], 
            "entries": message["entries"]
        }
        self.send(ack_append)

    def handle_successful_append(self, message) -> None:
        """Handles successful append response from a follower.
        
        Args:
            message: The successful append response message."""
        # Update match and next indexes
        self.match_ind[message["src"]] = message["prev_log_index"] + len(message["entries"])
        self.next_ind[message["src"]] = self.match_ind[message["src"]] + 1
    
        # Calculate new commit index and attempt to commit entries
        ordered_matches = sorted(self.match_ind.values())
        new_comm_ind = ordered_matches[-((len(self.others) + 1) // 2)]
        
        # Commit entries and cleanup index list
        self.attempt_commit(new_comm_ind)

    def attempt_commit(self, new_comm_ind) -> None:
        """Attempts to commit entries up to the new commit index.
        
        Args:
            new_comm_ind: The new commit index to attempt to commit entries up to."""
        if self.comm_ind < new_comm_ind and self.log[new_comm_ind]["term"] == self.term:
            entries = self.log[self.comm_ind + 1: new_comm_ind + 1]
            self.comm_ind = new_comm_ind
            self.handle_commit()
            self.notify_entries_committed(entries)

    def notify_entries_committed(self, entries):
        """Sends notification for committed entries.
        
        Args:
            entries: The entries that have been committed."""
        for entry in entries:
            if entry["term"] == self.term and entry["command"] == "put":
                ok_entry = {"src": self.id, 
                            "dst": entry["src"], 
                            "leader": self.current_leader, 
                            "type": "ok", 
                            "term": self.term, 
                            "MID": entry["MID"]}
                self.send(ok_entry)

    def handle_failed_append(self, message) -> None:
        """Handles a failed append response by adjusting indexes and retrying.
        
        Args:
            message: The failed append response message."""
        if "first_index" in message:
            self.next_ind[message["src"]] = max(message["first_index"], self.match_ind[message["src"]])
        else:
            self.next_ind[message["src"]] = max(1, self.next_ind[message["src"]] - 1)
        self.send_append_replica(message["src"])

    def handle_commit(self) -> None:
        """Commits the entries in the log from last applied to commit index."""
        if self.comm_ind > self.last_applied:
            for entry in self.log[self.last_applied + 1:self.comm_ind + 1]:
                if entry["command"] == "put":
                    self.db[entry["key"]] = entry["value"]
            self.last_applied = self.comm_ind

    def handle_timeout(self, current_time) -> None:
        """Handles when a follower's or a candidate's election timeout runs out. Starts a new election.

        Args:
            current_time: The current time.
        """
        if self.state != ReplicaState.LEADER and self.election_timeout - current_time <= 0:
            self.start_election()

    def handle_get(self, message) -> None:
        """Handles get request from client.
        
        Args:
            message: The get request from the client.
        """
        if self.state == ReplicaState.FOLLOWER:
            self.send_redirect(message)
        elif self.state == ReplicaState.CANDIDATE:
            self.queue.append(message)
        elif self.state == ReplicaState.LEADER:
            self.respond_to_get(message)

    def respond_to_get(self, message):
        """Responds to a get request from a client when the replica is the leader.
        
        Args:
            message: The get request from the client.
        """
        key = message["key"]
        value = self.db.get(key, "")  # Default to empty string if key not found
        ok_message = {
            "src": self.id, 
            "dst": message["src"], 
            "leader": self.current_leader, 
            "type": "ok", 
            "term": self.term, 
            "MID": message["MID"], 
            "value": value
        }
        self.send(ok_message)

    def handle_put(self, message) -> None: 
        """Handles put request from client.

        Args:
            message: The put request from the client.
        """
        if self.state == ReplicaState.LEADER:
                committed = self.is_committed(message)
                
                if not committed:
                    entry = {"command": message["type"], 
                             "src": message["src"], 
                             "MID": message["MID"], 
                             "key": message["key"], 
                             "value": message["value"],
                             "term": self.term}
                    self.log.append(entry)
        elif self.state == ReplicaState.FOLLOWER:
            self.send_redirect(message)
        elif self.state == ReplicaState.CANDIDATE:
            self.queue.append(message)
            
    def is_committed(self, message) -> bool:
        """Checks if a message has been committed.

        Args:
            message (dict): The message to check.

        Returns:
            bool: True if the message has been committed, False otherwise.
        """
        for entry in self.log[1:self.comm_ind + 1]:
            if entry["MID"] == message["MID"]:
                ok_message = {"src": self.id,
                            "dst": message["dst"],
                            "leader": self.current_leader,
                            "type": "ok",
                            "term": self.term,
                            "MID": message["MID"]}
                self.send(ok_message)
                return True
        return False   

    def send_redirect(self, message) -> None:
        """Redirects client to leader.

        Args:
            message: The message that needs to be redirected.
        """
        if self.current_leader != BROADCAST:
            redirect_message = {"src": self.id, 
                            "dst": message["src"], 
                            "leader": self.current_leader, 
                            "type": "redirect", 
                            "term": self.term, 
                            "MID": message["MID"]}
            self.send(redirect_message)
        else:
            self.queue.append(message)

    def drop_message(self, message) -> None:
        """Drops a message.

        Args:
            message: The message to drop.
        """
        self.log_message(f"Dropping message: {message}")
     
    def handle_message(self) -> None:
        """Handles incoming messages by delegating to the appropriate handler function."""
        socks = select.select([self.socket], [], [], 0.1)[0]
        if socks:
            data, addr = self.socket.recvfrom(65535)
            if not data:
                return
            message = json.loads(data.decode('utf-8'))

            # Save put/get requests when a leader is being elected, let vote requests and votes pass
            type = message["type"]
            if self.current_leader == BROADCAST and not type in ["requestvote", "vote", "append"]:
                if "MID" in message:
                    self.queue.append(message)
                return
            
            # If term outdated, transition to follower
            if "term" in message and self.term < message["term"]:
                self.transition_state(ReplicaState.FOLLOWER, message)

            # Delegate message handling based on the replica's state
            message_type = message["type"]
            if message_type == "get":
                self.handle_get(message)
            elif message_type == "put":
                self.handle_put(message)
            elif message_type == "ok":
                self.handle_ok(message)
            elif message_type == "fail":
                self.handle_fail(message)
            elif message_type == "requestvote":
                self.handle_vote_request(message)
            elif message_type == "vote":
                self.handle_vote(message)
            elif message_type == "append":
                self.handle_append(message) # Same for all
            else:
                self.log_message(f"Unknown message type: {message_type}")
    
    def handle_ok(self, message) -> None:
        """Handles an ok message from a follower."""
        if self.state == ReplicaState.LEADER:
            self.handle_successful_append(message)
        elif self.state == ReplicaState.FOLLOWER or self.state == ReplicaState.CANDIDATE:
            self.drop_message(message)
            
    def handle_fail(self, message) -> None:
        """Handles a fail message from a follower."""
        if self.state == ReplicaState.LEADER:
            self.handle_failed_append(message)
        elif self.state == ReplicaState.FOLLOWER or self.state == ReplicaState.CANDIDATE:
            self.drop_message(message)
            
    def handle_vote(self, message) -> None:
        """Handles a vote message from a follower."""
        if self.state == ReplicaState.LEADER or self.state == ReplicaState.FOLLOWER:
            self.drop_message(message)
        elif self.state == ReplicaState.CANDIDATE:
            self.parse_vote(message)
    
    def update_time(self):
        """Updates all time-related attributes."""
        current_time = time.time()
        self.handle_timeout(current_time)
        self.perform_heartbeat(current_time)
        self.append_entries(current_time)

    def run(self) -> None:
        """Starts and runs the replica."""
        while True:
            self.update_time()
            self.handle_message()
            self.handle_commit()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()